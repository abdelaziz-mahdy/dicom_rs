// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/dicom_rs_interface.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.8.0';

  @override
  int get rustContentHash => 293362247;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'dicom_rs',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  String crateApiDicomRsInterfaceDicomElementAutoAccessorGetTag({
    required DicomElement that,
  });

  String crateApiDicomRsInterfaceDicomElementAutoAccessorGetValue({
    required DicomElement that,
  });

  String crateApiDicomRsInterfaceDicomElementAutoAccessorGetVr({
    required DicomElement that,
  });

  void crateApiDicomRsInterfaceDicomElementAutoAccessorSetTag({
    required DicomElement that,
    required String tag,
  });

  void crateApiDicomRsInterfaceDicomElementAutoAccessorSetValue({
    required DicomElement that,
    required String value,
  });

  void crateApiDicomRsInterfaceDicomElementAutoAccessorSetVr({
    required DicomElement that,
    required String vr,
  });

  Future<DicomHandler> crateApiDicomRsInterfaceDicomHandlerDefault();

  Future<DicomImage> crateApiDicomRsInterfaceDicomHandlerExtractPixelData({
    required DicomHandler that,
    required String path,
  });

  Future<Uint8List> crateApiDicomRsInterfaceDicomHandlerGetImageBytes({
    required DicomHandler that,
    required String path,
  });

  Future<DicomMetadata> crateApiDicomRsInterfaceDicomHandlerGetMetadata({
    required DicomHandler that,
    required String path,
  });

  Future<bool> crateApiDicomRsInterfaceDicomHandlerIsDicomFile({
    required DicomHandler that,
    required String path,
  });

  Future<DicomFile> crateApiDicomRsInterfaceDicomHandlerLoadFile({
    required DicomHandler that,
    required String path,
  });

  Future<DicomFile> crateApiDicomRsInterfaceDicomHandlerLoadFileWithImage({
    required DicomHandler that,
    required String path,
  });

  Future<DicomHandler> crateApiDicomRsInterfaceDicomHandlerNew();

  Future<DicomImage> crateApiDicomRsInterfaceExtractPixelData({
    required String path,
  });

  Future<Uint8List> crateApiDicomRsInterfaceGetEncodedImage({
    required String path,
  });

  Future<bool> crateApiDicomRsInterfaceIsDicomFile({required String path});

  Future<DicomFile> crateApiDicomRsInterfaceLoadDicomFile({
    required String path,
  });

  Future<DicomFile> crateApiDicomRsInterfaceLoadDicomFileWithImage({
    required String path,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DicomElement;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DicomElement;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DicomElementPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiDicomRsInterfaceDicomElementAutoAccessorGetTag({
    required DicomElement that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDicomRsInterfaceDicomElementAutoAccessorGetTagConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDicomRsInterfaceDicomElementAutoAccessorGetTagConstMeta =>
      const TaskConstMeta(
        debugName: "DicomElement_auto_accessor_get_tag",
        argNames: ["that"],
      );

  @override
  String crateApiDicomRsInterfaceDicomElementAutoAccessorGetValue({
    required DicomElement that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDicomRsInterfaceDicomElementAutoAccessorGetValueConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDicomRsInterfaceDicomElementAutoAccessorGetValueConstMeta =>
      const TaskConstMeta(
        debugName: "DicomElement_auto_accessor_get_value",
        argNames: ["that"],
      );

  @override
  String crateApiDicomRsInterfaceDicomElementAutoAccessorGetVr({
    required DicomElement that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDicomRsInterfaceDicomElementAutoAccessorGetVrConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDicomRsInterfaceDicomElementAutoAccessorGetVrConstMeta =>
      const TaskConstMeta(
        debugName: "DicomElement_auto_accessor_get_vr",
        argNames: ["that"],
      );

  @override
  void crateApiDicomRsInterfaceDicomElementAutoAccessorSetTag({
    required DicomElement that,
    required String tag,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
            that,
            serializer,
          );
          sse_encode_String(tag, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDicomRsInterfaceDicomElementAutoAccessorSetTagConstMeta,
        argValues: [that, tag],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDicomRsInterfaceDicomElementAutoAccessorSetTagConstMeta =>
      const TaskConstMeta(
        debugName: "DicomElement_auto_accessor_set_tag",
        argNames: ["that", "tag"],
      );

  @override
  void crateApiDicomRsInterfaceDicomElementAutoAccessorSetValue({
    required DicomElement that,
    required String value,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
            that,
            serializer,
          );
          sse_encode_String(value, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDicomRsInterfaceDicomElementAutoAccessorSetValueConstMeta,
        argValues: [that, value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDicomRsInterfaceDicomElementAutoAccessorSetValueConstMeta =>
      const TaskConstMeta(
        debugName: "DicomElement_auto_accessor_set_value",
        argNames: ["that", "value"],
      );

  @override
  void crateApiDicomRsInterfaceDicomElementAutoAccessorSetVr({
    required DicomElement that,
    required String vr,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
            that,
            serializer,
          );
          sse_encode_String(vr, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDicomRsInterfaceDicomElementAutoAccessorSetVrConstMeta,
        argValues: [that, vr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDicomRsInterfaceDicomElementAutoAccessorSetVrConstMeta =>
      const TaskConstMeta(
        debugName: "DicomElement_auto_accessor_set_vr",
        argNames: ["that", "vr"],
      );

  @override
  Future<DicomHandler> crateApiDicomRsInterfaceDicomHandlerDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dicom_handler,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDicomRsInterfaceDicomHandlerDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDicomRsInterfaceDicomHandlerDefaultConstMeta =>
      const TaskConstMeta(debugName: "dicom_handler_default", argNames: []);

  @override
  Future<DicomImage> crateApiDicomRsInterfaceDicomHandlerExtractPixelData({
    required DicomHandler that,
    required String path,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_dicom_handler(that, serializer);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dicom_image,
          decodeErrorData: sse_decode_String,
        ),
        constMeta:
            kCrateApiDicomRsInterfaceDicomHandlerExtractPixelDataConstMeta,
        argValues: [that, path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDicomRsInterfaceDicomHandlerExtractPixelDataConstMeta =>
      const TaskConstMeta(
        debugName: "dicom_handler_extract_pixel_data",
        argNames: ["that", "path"],
      );

  @override
  Future<Uint8List> crateApiDicomRsInterfaceDicomHandlerGetImageBytes({
    required DicomHandler that,
    required String path,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_dicom_handler(that, serializer);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiDicomRsInterfaceDicomHandlerGetImageBytesConstMeta,
        argValues: [that, path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDicomRsInterfaceDicomHandlerGetImageBytesConstMeta =>
      const TaskConstMeta(
        debugName: "dicom_handler_get_image_bytes",
        argNames: ["that", "path"],
      );

  @override
  Future<DicomMetadata> crateApiDicomRsInterfaceDicomHandlerGetMetadata({
    required DicomHandler that,
    required String path,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_dicom_handler(that, serializer);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dicom_metadata,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiDicomRsInterfaceDicomHandlerGetMetadataConstMeta,
        argValues: [that, path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDicomRsInterfaceDicomHandlerGetMetadataConstMeta =>
      const TaskConstMeta(
        debugName: "dicom_handler_get_metadata",
        argNames: ["that", "path"],
      );

  @override
  Future<bool> crateApiDicomRsInterfaceDicomHandlerIsDicomFile({
    required DicomHandler that,
    required String path,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_dicom_handler(that, serializer);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDicomRsInterfaceDicomHandlerIsDicomFileConstMeta,
        argValues: [that, path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDicomRsInterfaceDicomHandlerIsDicomFileConstMeta =>
      const TaskConstMeta(
        debugName: "dicom_handler_is_dicom_file",
        argNames: ["that", "path"],
      );

  @override
  Future<DicomFile> crateApiDicomRsInterfaceDicomHandlerLoadFile({
    required DicomHandler that,
    required String path,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_dicom_handler(that, serializer);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dicom_file,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiDicomRsInterfaceDicomHandlerLoadFileConstMeta,
        argValues: [that, path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDicomRsInterfaceDicomHandlerLoadFileConstMeta =>
      const TaskConstMeta(
        debugName: "dicom_handler_load_file",
        argNames: ["that", "path"],
      );

  @override
  Future<DicomFile> crateApiDicomRsInterfaceDicomHandlerLoadFileWithImage({
    required DicomHandler that,
    required String path,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_dicom_handler(that, serializer);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dicom_file,
          decodeErrorData: sse_decode_String,
        ),
        constMeta:
            kCrateApiDicomRsInterfaceDicomHandlerLoadFileWithImageConstMeta,
        argValues: [that, path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDicomRsInterfaceDicomHandlerLoadFileWithImageConstMeta =>
      const TaskConstMeta(
        debugName: "dicom_handler_load_file_with_image",
        argNames: ["that", "path"],
      );

  @override
  Future<DicomHandler> crateApiDicomRsInterfaceDicomHandlerNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dicom_handler,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDicomRsInterfaceDicomHandlerNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDicomRsInterfaceDicomHandlerNewConstMeta =>
      const TaskConstMeta(debugName: "dicom_handler_new", argNames: []);

  @override
  Future<DicomImage> crateApiDicomRsInterfaceExtractPixelData({
    required String path,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dicom_image,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiDicomRsInterfaceExtractPixelDataConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDicomRsInterfaceExtractPixelDataConstMeta =>
      const TaskConstMeta(debugName: "extract_pixel_data", argNames: ["path"]);

  @override
  Future<Uint8List> crateApiDicomRsInterfaceGetEncodedImage({
    required String path,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiDicomRsInterfaceGetEncodedImageConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDicomRsInterfaceGetEncodedImageConstMeta =>
      const TaskConstMeta(debugName: "get_encoded_image", argNames: ["path"]);

  @override
  Future<bool> crateApiDicomRsInterfaceIsDicomFile({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDicomRsInterfaceIsDicomFileConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDicomRsInterfaceIsDicomFileConstMeta =>
      const TaskConstMeta(debugName: "is_dicom_file", argNames: ["path"]);

  @override
  Future<DicomFile> crateApiDicomRsInterfaceLoadDicomFile({
    required String path,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dicom_file,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiDicomRsInterfaceLoadDicomFileConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDicomRsInterfaceLoadDicomFileConstMeta =>
      const TaskConstMeta(debugName: "load_dicom_file", argNames: ["path"]);

  @override
  Future<DicomFile> crateApiDicomRsInterfaceLoadDicomFileWithImage({
    required String path,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dicom_file,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiDicomRsInterfaceLoadDicomFileWithImageConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDicomRsInterfaceLoadDicomFileWithImageConstMeta =>
      const TaskConstMeta(
        debugName: "load_dicom_file_with_image",
        argNames: ["path"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DicomElement =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DicomElement =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement;

  @protected
  DicomElement
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DicomElementImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DicomElement
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DicomElementImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DicomElement
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DicomElementImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DicomElement
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DicomElementImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DicomHandler dco_decode_box_autoadd_dicom_handler(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dicom_handler(raw);
  }

  @protected
  DicomImage dco_decode_box_autoadd_dicom_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dicom_image(raw);
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  DicomFile dco_decode_dicom_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DicomFile(
      path: dco_decode_String(arr[0]),
      metadata: dco_decode_dicom_metadata(arr[1]),
      image: dco_decode_opt_box_autoadd_dicom_image(arr[2]),
      isValid: dco_decode_bool(arr[3]),
    );
  }

  @protected
  DicomHandler dco_decode_dicom_handler(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.isNotEmpty)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return DicomHandler();
  }

  @protected
  DicomImage dco_decode_dicom_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return DicomImage(
      width: dco_decode_u_32(arr[0]),
      height: dco_decode_u_32(arr[1]),
      bitsAllocated: dco_decode_u_16(arr[2]),
      bitsStored: dco_decode_u_16(arr[3]),
      pixelRepresentation: dco_decode_u_16(arr[4]),
      photometricInterpretation: dco_decode_String(arr[5]),
      samplesPerPixel: dco_decode_u_16(arr[6]),
      pixelData: dco_decode_list_prim_u_8_strict(arr[7]),
    );
  }

  @protected
  DicomMetadata dco_decode_dicom_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 15)
      throw Exception('unexpected arr length: expect 15 but see ${arr.length}');
    return DicomMetadata(
      patientName: dco_decode_opt_String(arr[0]),
      patientId: dco_decode_opt_String(arr[1]),
      studyDate: dco_decode_opt_String(arr[2]),
      modality: dco_decode_opt_String(arr[3]),
      studyDescription: dco_decode_opt_String(arr[4]),
      seriesDescription: dco_decode_opt_String(arr[5]),
      instanceNumber: dco_decode_opt_box_autoadd_i_32(arr[6]),
      seriesNumber: dco_decode_opt_box_autoadd_i_32(arr[7]),
      studyInstanceUid: dco_decode_opt_String(arr[8]),
      seriesInstanceUid: dco_decode_opt_String(arr[9]),
      sopInstanceUid: dco_decode_opt_String(arr[10]),
      imagePosition: dco_decode_opt_list_prim_f_64_strict(arr[11]),
      pixelSpacing: dco_decode_opt_list_prim_f_64_strict(arr[12]),
      sliceLocation: dco_decode_opt_box_autoadd_f_64(arr[13]),
      sliceThickness: dco_decode_opt_box_autoadd_f_64(arr[14]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Float64List dco_decode_list_prim_f_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Float64List;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  DicomImage? dco_decode_opt_box_autoadd_dicom_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dicom_image(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_32(raw);
  }

  @protected
  Float64List? dco_decode_opt_list_prim_f_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_f_64_strict(raw);
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  DicomElement
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DicomElementImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DicomElement
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DicomElementImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DicomElement
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DicomElementImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DicomElement
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DicomElementImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  DicomHandler sse_decode_box_autoadd_dicom_handler(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dicom_handler(deserializer));
  }

  @protected
  DicomImage sse_decode_box_autoadd_dicom_image(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dicom_image(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_32(deserializer));
  }

  @protected
  DicomFile sse_decode_dicom_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_String(deserializer);
    var var_metadata = sse_decode_dicom_metadata(deserializer);
    var var_image = sse_decode_opt_box_autoadd_dicom_image(deserializer);
    var var_isValid = sse_decode_bool(deserializer);
    return DicomFile(
      path: var_path,
      metadata: var_metadata,
      image: var_image,
      isValid: var_isValid,
    );
  }

  @protected
  DicomHandler sse_decode_dicom_handler(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DicomHandler();
  }

  @protected
  DicomImage sse_decode_dicom_image(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_width = sse_decode_u_32(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_bitsAllocated = sse_decode_u_16(deserializer);
    var var_bitsStored = sse_decode_u_16(deserializer);
    var var_pixelRepresentation = sse_decode_u_16(deserializer);
    var var_photometricInterpretation = sse_decode_String(deserializer);
    var var_samplesPerPixel = sse_decode_u_16(deserializer);
    var var_pixelData = sse_decode_list_prim_u_8_strict(deserializer);
    return DicomImage(
      width: var_width,
      height: var_height,
      bitsAllocated: var_bitsAllocated,
      bitsStored: var_bitsStored,
      pixelRepresentation: var_pixelRepresentation,
      photometricInterpretation: var_photometricInterpretation,
      samplesPerPixel: var_samplesPerPixel,
      pixelData: var_pixelData,
    );
  }

  @protected
  DicomMetadata sse_decode_dicom_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_patientName = sse_decode_opt_String(deserializer);
    var var_patientId = sse_decode_opt_String(deserializer);
    var var_studyDate = sse_decode_opt_String(deserializer);
    var var_modality = sse_decode_opt_String(deserializer);
    var var_studyDescription = sse_decode_opt_String(deserializer);
    var var_seriesDescription = sse_decode_opt_String(deserializer);
    var var_instanceNumber = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_seriesNumber = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_studyInstanceUid = sse_decode_opt_String(deserializer);
    var var_seriesInstanceUid = sse_decode_opt_String(deserializer);
    var var_sopInstanceUid = sse_decode_opt_String(deserializer);
    var var_imagePosition = sse_decode_opt_list_prim_f_64_strict(deserializer);
    var var_pixelSpacing = sse_decode_opt_list_prim_f_64_strict(deserializer);
    var var_sliceLocation = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_sliceThickness = sse_decode_opt_box_autoadd_f_64(deserializer);
    return DicomMetadata(
      patientName: var_patientName,
      patientId: var_patientId,
      studyDate: var_studyDate,
      modality: var_modality,
      studyDescription: var_studyDescription,
      seriesDescription: var_seriesDescription,
      instanceNumber: var_instanceNumber,
      seriesNumber: var_seriesNumber,
      studyInstanceUid: var_studyInstanceUid,
      seriesInstanceUid: var_seriesInstanceUid,
      sopInstanceUid: var_sopInstanceUid,
      imagePosition: var_imagePosition,
      pixelSpacing: var_pixelSpacing,
      sliceLocation: var_sliceLocation,
      sliceThickness: var_sliceThickness,
    );
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat64List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DicomImage? sse_decode_opt_box_autoadd_dicom_image(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dicom_image(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Float64List? sse_decode_opt_list_prim_f_64_strict(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_f_64_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
    DicomElement self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DicomElementImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
    DicomElement self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DicomElementImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
    DicomElement self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DicomElementImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDicomElement(
    DicomElement self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DicomElementImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_dicom_handler(
    DicomHandler self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dicom_handler(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dicom_image(
    DicomImage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dicom_image(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_dicom_file(DicomFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.path, serializer);
    sse_encode_dicom_metadata(self.metadata, serializer);
    sse_encode_opt_box_autoadd_dicom_image(self.image, serializer);
    sse_encode_bool(self.isValid, serializer);
  }

  @protected
  void sse_encode_dicom_handler(DicomHandler self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_dicom_image(DicomImage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.width, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_16(self.bitsAllocated, serializer);
    sse_encode_u_16(self.bitsStored, serializer);
    sse_encode_u_16(self.pixelRepresentation, serializer);
    sse_encode_String(self.photometricInterpretation, serializer);
    sse_encode_u_16(self.samplesPerPixel, serializer);
    sse_encode_list_prim_u_8_strict(self.pixelData, serializer);
  }

  @protected
  void sse_encode_dicom_metadata(DicomMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.patientName, serializer);
    sse_encode_opt_String(self.patientId, serializer);
    sse_encode_opt_String(self.studyDate, serializer);
    sse_encode_opt_String(self.modality, serializer);
    sse_encode_opt_String(self.studyDescription, serializer);
    sse_encode_opt_String(self.seriesDescription, serializer);
    sse_encode_opt_box_autoadd_i_32(self.instanceNumber, serializer);
    sse_encode_opt_box_autoadd_i_32(self.seriesNumber, serializer);
    sse_encode_opt_String(self.studyInstanceUid, serializer);
    sse_encode_opt_String(self.seriesInstanceUid, serializer);
    sse_encode_opt_String(self.sopInstanceUid, serializer);
    sse_encode_opt_list_prim_f_64_strict(self.imagePosition, serializer);
    sse_encode_opt_list_prim_f_64_strict(self.pixelSpacing, serializer);
    sse_encode_opt_box_autoadd_f_64(self.sliceLocation, serializer);
    sse_encode_opt_box_autoadd_f_64(self.sliceThickness, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_prim_f_64_strict(
    Float64List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dicom_image(
    DicomImage? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dicom_image(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_f_64_strict(
    Float64List? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_f_64_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class DicomElementImpl extends RustOpaque implements DicomElement {
  // Not to be used by end users
  DicomElementImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DicomElementImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DicomElement,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DicomElement,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DicomElementPtr,
  );

  String get tag => RustLib.instance.api
      .crateApiDicomRsInterfaceDicomElementAutoAccessorGetTag(that: this);

  String get value => RustLib.instance.api
      .crateApiDicomRsInterfaceDicomElementAutoAccessorGetValue(that: this);

  String get vr => RustLib.instance.api
      .crateApiDicomRsInterfaceDicomElementAutoAccessorGetVr(that: this);

  set tag(String tag) => RustLib.instance.api
      .crateApiDicomRsInterfaceDicomElementAutoAccessorSetTag(
        that: this,
        tag: tag,
      );

  set value(String value) => RustLib.instance.api
      .crateApiDicomRsInterfaceDicomElementAutoAccessorSetValue(
        that: this,
        value: value,
      );

  set vr(String vr) => RustLib.instance.api
      .crateApiDicomRsInterfaceDicomElementAutoAccessorSetVr(
        that: this,
        vr: vr,
      );
}
