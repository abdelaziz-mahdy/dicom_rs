// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.8.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -204723926;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__dicom_rs_interface__compute_slice_spacing_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "compute_slice_spacing",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_entries =
                <Vec<crate::api::dicom_rs_interface::DicomDirectoryEntry>>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::dicom_rs_interface::compute_slice_spacing(&api_entries),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::dicom_rs_interface::DicomHandler::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_get_all_metadata_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_get_all_metadata",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::DicomHandler::get_all_metadata(
                        &api_that, api_path,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_get_all_tags_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_get_all_tags",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::DicomHandler::get_all_tags(
                        &api_that, api_path,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_get_image_bytes_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_get_image_bytes",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::DicomHandler::get_image_bytes(
                        &api_that, api_path,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_get_metadata_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_get_metadata",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::DicomHandler::get_metadata(
                        &api_that, api_path,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_get_pixel_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_get_pixel_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::DicomHandler::get_pixel_data(
                        &api_that, api_path,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_get_tag_value_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_get_tag_value",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            let api_tag_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::DicomHandler::get_tag_value(
                        &api_that,
                        api_path,
                        api_tag_name,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_is_dicomdir_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_is_dicomdir",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::dicom_rs_interface::DicomHandler::is_dicomdir(
                            &api_that, api_path,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_is_valid_dicom_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_is_valid_dicom",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::dicom_rs_interface::DicomHandler::is_valid_dicom(
                            &api_that, api_path,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_list_tags_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_list_tags",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::DicomHandler::list_tags(
                        &api_that, api_path,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_load_complete_study_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_load_complete_study",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok =
                        crate::api::dicom_rs_interface::DicomHandler::load_complete_study(
                            &api_that, api_path,
                        )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_load_complete_study_recursive_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "dicom_handler_load_complete_study_recursive", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
let api_path = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, String>((move ||  {
                         let output_ok = crate::api::dicom_rs_interface::DicomHandler::load_complete_study_recursive(&api_that, api_path)?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_load_directory_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_load_directory",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::DicomHandler::load_directory(
                        &api_that, api_path,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_load_directory_organized_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_load_directory_organized",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok =
                        crate::api::dicom_rs_interface::DicomHandler::load_directory_organized(
                            &api_that, api_path,
                        )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_load_directory_recursive_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_load_directory_recursive",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok =
                        crate::api::dicom_rs_interface::DicomHandler::load_directory_recursive(
                            &api_that, api_path,
                        )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_load_directory_recursive_organized_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "dicom_handler_load_directory_recursive_organized", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
let api_path = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, String>((move ||  {
                         let output_ok = crate::api::dicom_rs_interface::DicomHandler::load_directory_recursive_organized(&api_that, api_path)?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_load_directory_unified_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_load_directory_unified",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            let api_recursive = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok =
                        crate::api::dicom_rs_interface::DicomHandler::load_directory_unified(
                            &api_that,
                            api_path,
                            api_recursive,
                        )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_load_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_load_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::DicomHandler::load_file(
                        &api_that, api_path,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_load_volume_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_load_volume",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::DicomHandler::load_volume(
                        &api_that, api_path,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::dicom_rs_interface::DicomHandler::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__dicom_handler_parse_dicomdir_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dicom_handler_parse_dicomdir",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::dicom_rs_interface::DicomHandler>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::DicomHandler::parse_dicomdir(
                        &api_that, api_path,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__extract_all_metadata_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "extract_all_metadata",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok =
                        crate::api::dicom_rs_interface::extract_all_metadata(&api_path)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__extract_pixel_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "extract_pixel_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::extract_pixel_data(api_path)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__flip_vertically_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "flip_vertically",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_pixel_data = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_height = <u32>::sse_decode(&mut deserializer);
            let api_row_length = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::dicom_rs_interface::flip_vertically(
                            &api_pixel_data,
                            api_height,
                            api_row_length,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__get_encoded_image_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_encoded_image",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::get_encoded_image(api_path)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__get_tag_value_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_tag_value",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            let api_tag_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok =
                        crate::api::dicom_rs_interface::get_tag_value(api_path, api_tag_name)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__is_dicom_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_dicom_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::dicom_rs_interface::is_dicom_file(api_path),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__is_dicomdir_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_dicomdir_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::dicom_rs_interface::is_dicomdir_file(&api_path),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__list_all_tags_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "list_all_tags",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::list_all_tags(api_path)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__load_complete_study_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "load_complete_study",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_dir_path = <String>::sse_decode(&mut deserializer);
            let api_recursive = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::load_complete_study(
                        api_dir_path,
                        api_recursive,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__load_dicom_directory_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "load_dicom_directory",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_dir_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok =
                        crate::api::dicom_rs_interface::load_dicom_directory(api_dir_path)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__load_dicom_directory_organized_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "load_dicom_directory_organized",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_dir_path = <String>::sse_decode(&mut deserializer);
            let api_recursive = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::load_dicom_directory_organized(
                        api_dir_path,
                        api_recursive,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__load_dicom_directory_recursive_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "load_dicom_directory_recursive",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_dir_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::load_dicom_directory_recursive(
                        api_dir_path,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__load_dicom_directory_unified_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "load_dicom_directory_unified",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_dir_path = <String>::sse_decode(&mut deserializer);
            let api_recursive = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::load_dicom_directory_unified(
                        api_dir_path,
                        api_recursive,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__load_dicom_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "load_dicom_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::load_dicom_file(api_path)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__load_volume_from_directory_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "load_volume_from_directory",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_dir_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok =
                        crate::api::dicom_rs_interface::load_volume_from_directory(api_dir_path)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__dicom_rs_interface__parse_dicomdir_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse_dicomdir_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::dicom_rs_interface::parse_dicomdir_file(api_path)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: dart2rust

impl SseDecode
    for std::collections::HashMap<
        String,
        std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            String,
            std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<(String, crate::api::dicom_rs_interface::DicomTag)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomValueType>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, crate::api::dicom_rs_interface::DicomValueType)>>::sse_decode(
            deserializer,
        );
        return inner.into_iter().collect();
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomDirEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_path = <String>::sse_decode(deserializer);
        let mut var_typeName = <String>::sse_decode(deserializer);
        let mut var_metadata = <std::collections::HashMap<
            String,
            crate::api::dicom_rs_interface::DicomValueType,
        >>::sse_decode(deserializer);
        let mut var_children =
            <Vec<crate::api::dicom_rs_interface::DicomDirEntry>>::sse_decode(deserializer);
        return crate::api::dicom_rs_interface::DicomDirEntry {
            path: var_path,
            type_name: var_typeName,
            metadata: var_metadata,
            children: var_children,
        };
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomDirectoryEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_path = <String>::sse_decode(deserializer);
        let mut var_metadata =
            <crate::api::dicom_rs_interface::DicomMetadata>::sse_decode(deserializer);
        let mut var_isValid = <bool>::sse_decode(deserializer);
        return crate::api::dicom_rs_interface::DicomDirectoryEntry {
            path: var_path,
            metadata: var_metadata,
            is_valid: var_isValid,
        };
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomFile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_path = <String>::sse_decode(deserializer);
        let mut var_metadata =
            <crate::api::dicom_rs_interface::DicomMetadata>::sse_decode(deserializer);
        let mut var_allTags =
            <Vec<crate::api::dicom_rs_interface::DicomTag>>::sse_decode(deserializer);
        return crate::api::dicom_rs_interface::DicomFile {
            path: var_path,
            metadata: var_metadata,
            all_tags: var_allTags,
        };
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomHandler {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::dicom_rs_interface::DicomHandler {};
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomImage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_width = <u32>::sse_decode(deserializer);
        let mut var_height = <u32>::sse_decode(deserializer);
        let mut var_bitsAllocated = <u16>::sse_decode(deserializer);
        let mut var_bitsStored = <u16>::sse_decode(deserializer);
        let mut var_highBit = <u16>::sse_decode(deserializer);
        let mut var_pixelRepresentation = <u16>::sse_decode(deserializer);
        let mut var_photometricInterpretation = <String>::sse_decode(deserializer);
        let mut var_samplesPerPixel = <u16>::sse_decode(deserializer);
        let mut var_planarConfiguration = <Option<u16>>::sse_decode(deserializer);
        let mut var_pixelData = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::dicom_rs_interface::DicomImage {
            width: var_width,
            height: var_height,
            bits_allocated: var_bitsAllocated,
            bits_stored: var_bitsStored,
            high_bit: var_highBit,
            pixel_representation: var_pixelRepresentation,
            photometric_interpretation: var_photometricInterpretation,
            samples_per_pixel: var_samplesPerPixel,
            planar_configuration: var_planarConfiguration,
            pixel_data: var_pixelData,
        };
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomInstance {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_path = <String>::sse_decode(deserializer);
        let mut var_sopInstanceUid = <Option<String>>::sse_decode(deserializer);
        let mut var_instanceNumber = <Option<i32>>::sse_decode(deserializer);
        let mut var_imagePosition = <Option<Vec<f64>>>::sse_decode(deserializer);
        let mut var_sliceLocation = <Option<f64>>::sse_decode(deserializer);
        let mut var_isValid = <bool>::sse_decode(deserializer);
        return crate::api::dicom_rs_interface::DicomInstance {
            path: var_path,
            sop_instance_uid: var_sopInstanceUid,
            instance_number: var_instanceNumber,
            image_position: var_imagePosition,
            slice_location: var_sliceLocation,
            is_valid: var_isValid,
        };
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_patientName = <Option<String>>::sse_decode(deserializer);
        let mut var_patientId = <Option<String>>::sse_decode(deserializer);
        let mut var_studyDate = <Option<String>>::sse_decode(deserializer);
        let mut var_accessionNumber = <Option<String>>::sse_decode(deserializer);
        let mut var_modality = <Option<String>>::sse_decode(deserializer);
        let mut var_studyDescription = <Option<String>>::sse_decode(deserializer);
        let mut var_seriesDescription = <Option<String>>::sse_decode(deserializer);
        let mut var_instanceNumber = <Option<i32>>::sse_decode(deserializer);
        let mut var_seriesNumber = <Option<i32>>::sse_decode(deserializer);
        let mut var_studyInstanceUid = <Option<String>>::sse_decode(deserializer);
        let mut var_seriesInstanceUid = <Option<String>>::sse_decode(deserializer);
        let mut var_sopInstanceUid = <Option<String>>::sse_decode(deserializer);
        let mut var_imagePosition = <Option<Vec<f64>>>::sse_decode(deserializer);
        let mut var_imageOrientation = <Option<Vec<f64>>>::sse_decode(deserializer);
        let mut var_sliceLocation = <Option<f64>>::sse_decode(deserializer);
        let mut var_sliceThickness = <Option<f64>>::sse_decode(deserializer);
        let mut var_spacingBetweenSlices = <Option<f64>>::sse_decode(deserializer);
        let mut var_pixelSpacing = <Option<Vec<f64>>>::sse_decode(deserializer);
        return crate::api::dicom_rs_interface::DicomMetadata {
            patient_name: var_patientName,
            patient_id: var_patientId,
            study_date: var_studyDate,
            accession_number: var_accessionNumber,
            modality: var_modality,
            study_description: var_studyDescription,
            series_description: var_seriesDescription,
            instance_number: var_instanceNumber,
            series_number: var_seriesNumber,
            study_instance_uid: var_studyInstanceUid,
            series_instance_uid: var_seriesInstanceUid,
            sop_instance_uid: var_sopInstanceUid,
            image_position: var_imagePosition,
            image_orientation: var_imageOrientation,
            slice_location: var_sliceLocation,
            slice_thickness: var_sliceThickness,
            spacing_between_slices: var_spacingBetweenSlices,
            pixel_spacing: var_pixelSpacing,
        };
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomMetadataMap {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tags = <std::collections::HashMap<
            String,
            crate::api::dicom_rs_interface::DicomTag,
        >>::sse_decode(deserializer);
        let mut var_groupElements = <std::collections::HashMap<
            String,
            std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>,
        >>::sse_decode(deserializer);
        return crate::api::dicom_rs_interface::DicomMetadataMap {
            tags: var_tags,
            group_elements: var_groupElements,
        };
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomPatient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_patientId = <Option<String>>::sse_decode(deserializer);
        let mut var_patientName = <Option<String>>::sse_decode(deserializer);
        let mut var_studies =
            <Vec<crate::api::dicom_rs_interface::DicomStudy>>::sse_decode(deserializer);
        return crate::api::dicom_rs_interface::DicomPatient {
            patient_id: var_patientId,
            patient_name: var_patientName,
            studies: var_studies,
        };
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomSeries {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_seriesInstanceUid = <Option<String>>::sse_decode(deserializer);
        let mut var_seriesNumber = <Option<i32>>::sse_decode(deserializer);
        let mut var_seriesDescription = <Option<String>>::sse_decode(deserializer);
        let mut var_modality = <Option<String>>::sse_decode(deserializer);
        let mut var_instances =
            <Vec<crate::api::dicom_rs_interface::DicomInstance>>::sse_decode(deserializer);
        return crate::api::dicom_rs_interface::DicomSeries {
            series_instance_uid: var_seriesInstanceUid,
            series_number: var_seriesNumber,
            series_description: var_seriesDescription,
            modality: var_modality,
            instances: var_instances,
        };
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomStudy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_studyInstanceUid = <Option<String>>::sse_decode(deserializer);
        let mut var_studyDate = <Option<String>>::sse_decode(deserializer);
        let mut var_studyDescription = <Option<String>>::sse_decode(deserializer);
        let mut var_accessionNumber = <Option<String>>::sse_decode(deserializer);
        let mut var_series =
            <Vec<crate::api::dicom_rs_interface::DicomSeries>>::sse_decode(deserializer);
        return crate::api::dicom_rs_interface::DicomStudy {
            study_instance_uid: var_studyInstanceUid,
            study_date: var_studyDate,
            study_description: var_studyDescription,
            accession_number: var_accessionNumber,
            series: var_series,
        };
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomTag {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tag = <String>::sse_decode(deserializer);
        let mut var_vr = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_value =
            <crate::api::dicom_rs_interface::DicomValueType>::sse_decode(deserializer);
        return crate::api::dicom_rs_interface::DicomTag {
            tag: var_tag,
            vr: var_vr,
            name: var_name,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomValueType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::dicom_rs_interface::DicomValueType::Str(var_field0);
            }
            1 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::dicom_rs_interface::DicomValueType::Int(var_field0);
            }
            2 => {
                let mut var_field0 = <f32>::sse_decode(deserializer);
                return crate::api::dicom_rs_interface::DicomValueType::Float(var_field0);
            }
            3 => {
                let mut var_field0 = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::dicom_rs_interface::DicomValueType::IntList(var_field0);
            }
            4 => {
                let mut var_field0 = <Vec<f32>>::sse_decode(deserializer);
                return crate::api::dicom_rs_interface::DicomValueType::FloatList(var_field0);
            }
            5 => {
                let mut var_field0 = <Vec<String>>::sse_decode(deserializer);
                return crate::api::dicom_rs_interface::DicomValueType::StrList(var_field0);
            }
            6 => {
                return crate::api::dicom_rs_interface::DicomValueType::Unknown;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::dicom_rs_interface::DicomVolume {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_width = <u32>::sse_decode(deserializer);
        let mut var_height = <u32>::sse_decode(deserializer);
        let mut var_depth = <u32>::sse_decode(deserializer);
        let mut var_spacing = <(f64, f64, f64)>::sse_decode(deserializer);
        let mut var_dataType = <String>::sse_decode(deserializer);
        let mut var_numComponents = <u32>::sse_decode(deserializer);
        let mut var_slices = <Vec<Vec<u8>>>::sse_decode(deserializer);
        return crate::api::dicom_rs_interface::DicomVolume {
            width: var_width,
            height: var_height,
            depth: var_depth,
            spacing: var_spacing,
            data_type: var_dataType,
            num_components: var_numComponents,
            slices: var_slices,
        };
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::dicom_rs_interface::DicomDirEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::dicom_rs_interface::DicomDirEntry>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::dicom_rs_interface::DicomDirectoryEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::dicom_rs_interface::DicomDirectoryEntry>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::dicom_rs_interface::DicomInstance> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::dicom_rs_interface::DicomInstance>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::dicom_rs_interface::DicomPatient> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::dicom_rs_interface::DicomPatient>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::dicom_rs_interface::DicomSeries> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::dicom_rs_interface::DicomSeries>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::dicom_rs_interface::DicomStudy> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::dicom_rs_interface::DicomStudy>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::dicom_rs_interface::DicomTag> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::dicom_rs_interface::DicomTag>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Vec<u8>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<f32>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<f64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<i32>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, crate::api::dicom_rs_interface::DicomTag)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <(String, crate::api::dicom_rs_interface::DicomTag)>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, crate::api::dicom_rs_interface::DicomValueType)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <(String, crate::api::dicom_rs_interface::DicomValueType)>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        String,
        std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                String,
                std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u16>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<f64>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<f64>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for (f64, f64, f64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <f64>::sse_decode(deserializer);
        let mut var_field1 = <f64>::sse_decode(deserializer);
        let mut var_field2 = <f64>::sse_decode(deserializer);
        return (var_field0, var_field1, var_field2);
    }
}

impl SseDecode for (String, crate::api::dicom_rs_interface::DicomTag) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::dicom_rs_interface::DicomTag>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, crate::api::dicom_rs_interface::DicomValueType) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::dicom_rs_interface::DicomValueType>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        String,
        std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <std::collections::HashMap<
            String,
            crate::api::dicom_rs_interface::DicomTag,
        >>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
                        1 => wire__crate__api__dicom_rs_interface__compute_slice_spacing_impl(port, ptr, rust_vec_len, data_len),
2 => wire__crate__api__dicom_rs_interface__dicom_handler_default_impl(port, ptr, rust_vec_len, data_len),
3 => wire__crate__api__dicom_rs_interface__dicom_handler_get_all_metadata_impl(port, ptr, rust_vec_len, data_len),
4 => wire__crate__api__dicom_rs_interface__dicom_handler_get_all_tags_impl(port, ptr, rust_vec_len, data_len),
5 => wire__crate__api__dicom_rs_interface__dicom_handler_get_image_bytes_impl(port, ptr, rust_vec_len, data_len),
6 => wire__crate__api__dicom_rs_interface__dicom_handler_get_metadata_impl(port, ptr, rust_vec_len, data_len),
7 => wire__crate__api__dicom_rs_interface__dicom_handler_get_pixel_data_impl(port, ptr, rust_vec_len, data_len),
8 => wire__crate__api__dicom_rs_interface__dicom_handler_get_tag_value_impl(port, ptr, rust_vec_len, data_len),
9 => wire__crate__api__dicom_rs_interface__dicom_handler_is_dicomdir_impl(port, ptr, rust_vec_len, data_len),
10 => wire__crate__api__dicom_rs_interface__dicom_handler_is_valid_dicom_impl(port, ptr, rust_vec_len, data_len),
11 => wire__crate__api__dicom_rs_interface__dicom_handler_list_tags_impl(port, ptr, rust_vec_len, data_len),
12 => wire__crate__api__dicom_rs_interface__dicom_handler_load_complete_study_impl(port, ptr, rust_vec_len, data_len),
13 => wire__crate__api__dicom_rs_interface__dicom_handler_load_complete_study_recursive_impl(port, ptr, rust_vec_len, data_len),
14 => wire__crate__api__dicom_rs_interface__dicom_handler_load_directory_impl(port, ptr, rust_vec_len, data_len),
15 => wire__crate__api__dicom_rs_interface__dicom_handler_load_directory_organized_impl(port, ptr, rust_vec_len, data_len),
16 => wire__crate__api__dicom_rs_interface__dicom_handler_load_directory_recursive_impl(port, ptr, rust_vec_len, data_len),
17 => wire__crate__api__dicom_rs_interface__dicom_handler_load_directory_recursive_organized_impl(port, ptr, rust_vec_len, data_len),
18 => wire__crate__api__dicom_rs_interface__dicom_handler_load_directory_unified_impl(port, ptr, rust_vec_len, data_len),
19 => wire__crate__api__dicom_rs_interface__dicom_handler_load_file_impl(port, ptr, rust_vec_len, data_len),
20 => wire__crate__api__dicom_rs_interface__dicom_handler_load_volume_impl(port, ptr, rust_vec_len, data_len),
21 => wire__crate__api__dicom_rs_interface__dicom_handler_new_impl(port, ptr, rust_vec_len, data_len),
22 => wire__crate__api__dicom_rs_interface__dicom_handler_parse_dicomdir_impl(port, ptr, rust_vec_len, data_len),
23 => wire__crate__api__dicom_rs_interface__extract_all_metadata_impl(port, ptr, rust_vec_len, data_len),
24 => wire__crate__api__dicom_rs_interface__extract_pixel_data_impl(port, ptr, rust_vec_len, data_len),
25 => wire__crate__api__dicom_rs_interface__flip_vertically_impl(port, ptr, rust_vec_len, data_len),
26 => wire__crate__api__dicom_rs_interface__get_encoded_image_impl(port, ptr, rust_vec_len, data_len),
27 => wire__crate__api__dicom_rs_interface__get_tag_value_impl(port, ptr, rust_vec_len, data_len),
28 => wire__crate__api__dicom_rs_interface__is_dicom_file_impl(port, ptr, rust_vec_len, data_len),
29 => wire__crate__api__dicom_rs_interface__is_dicomdir_file_impl(port, ptr, rust_vec_len, data_len),
30 => wire__crate__api__dicom_rs_interface__list_all_tags_impl(port, ptr, rust_vec_len, data_len),
31 => wire__crate__api__dicom_rs_interface__load_complete_study_impl(port, ptr, rust_vec_len, data_len),
32 => wire__crate__api__dicom_rs_interface__load_dicom_directory_impl(port, ptr, rust_vec_len, data_len),
33 => wire__crate__api__dicom_rs_interface__load_dicom_directory_organized_impl(port, ptr, rust_vec_len, data_len),
34 => wire__crate__api__dicom_rs_interface__load_dicom_directory_recursive_impl(port, ptr, rust_vec_len, data_len),
35 => wire__crate__api__dicom_rs_interface__load_dicom_directory_unified_impl(port, ptr, rust_vec_len, data_len),
36 => wire__crate__api__dicom_rs_interface__load_dicom_file_impl(port, ptr, rust_vec_len, data_len),
37 => wire__crate__api__dicom_rs_interface__load_volume_from_directory_impl(port, ptr, rust_vec_len, data_len),
38 => wire__crate__api__dicom_rs_interface__parse_dicomdir_file_impl(port, ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomDirEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.path.into_into_dart().into_dart(),
            self.type_name.into_into_dart().into_dart(),
            self.metadata.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomDirEntry
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomDirEntry>
    for crate::api::dicom_rs_interface::DicomDirEntry
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomDirEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomDirectoryEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.path.into_into_dart().into_dart(),
            self.metadata.into_into_dart().into_dart(),
            self.is_valid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomDirectoryEntry
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomDirectoryEntry>
    for crate::api::dicom_rs_interface::DicomDirectoryEntry
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomDirectoryEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomFile {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.path.into_into_dart().into_dart(),
            self.metadata.into_into_dart().into_dart(),
            self.all_tags.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomFile
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomFile>
    for crate::api::dicom_rs_interface::DicomFile
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomFile {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomHandler {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomHandler
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomHandler>
    for crate::api::dicom_rs_interface::DicomHandler
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomHandler {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomImage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.bits_allocated.into_into_dart().into_dart(),
            self.bits_stored.into_into_dart().into_dart(),
            self.high_bit.into_into_dart().into_dart(),
            self.pixel_representation.into_into_dart().into_dart(),
            self.photometric_interpretation.into_into_dart().into_dart(),
            self.samples_per_pixel.into_into_dart().into_dart(),
            self.planar_configuration.into_into_dart().into_dart(),
            self.pixel_data.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomImage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomImage>
    for crate::api::dicom_rs_interface::DicomImage
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomImage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomInstance {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.path.into_into_dart().into_dart(),
            self.sop_instance_uid.into_into_dart().into_dart(),
            self.instance_number.into_into_dart().into_dart(),
            self.image_position.into_into_dart().into_dart(),
            self.slice_location.into_into_dart().into_dart(),
            self.is_valid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomInstance
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomInstance>
    for crate::api::dicom_rs_interface::DicomInstance
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomInstance {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomMetadata {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.patient_name.into_into_dart().into_dart(),
            self.patient_id.into_into_dart().into_dart(),
            self.study_date.into_into_dart().into_dart(),
            self.accession_number.into_into_dart().into_dart(),
            self.modality.into_into_dart().into_dart(),
            self.study_description.into_into_dart().into_dart(),
            self.series_description.into_into_dart().into_dart(),
            self.instance_number.into_into_dart().into_dart(),
            self.series_number.into_into_dart().into_dart(),
            self.study_instance_uid.into_into_dart().into_dart(),
            self.series_instance_uid.into_into_dart().into_dart(),
            self.sop_instance_uid.into_into_dart().into_dart(),
            self.image_position.into_into_dart().into_dart(),
            self.image_orientation.into_into_dart().into_dart(),
            self.slice_location.into_into_dart().into_dart(),
            self.slice_thickness.into_into_dart().into_dart(),
            self.spacing_between_slices.into_into_dart().into_dart(),
            self.pixel_spacing.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomMetadata
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomMetadata>
    for crate::api::dicom_rs_interface::DicomMetadata
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomMetadata {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomMetadataMap {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tags.into_into_dart().into_dart(),
            self.group_elements.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomMetadataMap
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomMetadataMap>
    for crate::api::dicom_rs_interface::DicomMetadataMap
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomMetadataMap {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomPatient {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.patient_id.into_into_dart().into_dart(),
            self.patient_name.into_into_dart().into_dart(),
            self.studies.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomPatient
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomPatient>
    for crate::api::dicom_rs_interface::DicomPatient
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomPatient {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomSeries {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.series_instance_uid.into_into_dart().into_dart(),
            self.series_number.into_into_dart().into_dart(),
            self.series_description.into_into_dart().into_dart(),
            self.modality.into_into_dart().into_dart(),
            self.instances.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomSeries
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomSeries>
    for crate::api::dicom_rs_interface::DicomSeries
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomSeries {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomStudy {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.study_instance_uid.into_into_dart().into_dart(),
            self.study_date.into_into_dart().into_dart(),
            self.study_description.into_into_dart().into_dart(),
            self.accession_number.into_into_dart().into_dart(),
            self.series.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomStudy
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomStudy>
    for crate::api::dicom_rs_interface::DicomStudy
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomStudy {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomTag {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tag.into_into_dart().into_dart(),
            self.vr.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomTag
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomTag>
    for crate::api::dicom_rs_interface::DicomTag
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomTag {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomValueType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::dicom_rs_interface::DicomValueType::Str(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::dicom_rs_interface::DicomValueType::Int(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::dicom_rs_interface::DicomValueType::Float(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::dicom_rs_interface::DicomValueType::IntList(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::dicom_rs_interface::DicomValueType::FloatList(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::dicom_rs_interface::DicomValueType::StrList(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::dicom_rs_interface::DicomValueType::Unknown => [6.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomValueType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomValueType>
    for crate::api::dicom_rs_interface::DicomValueType
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomValueType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dicom_rs_interface::DicomVolume {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.depth.into_into_dart().into_dart(),
            self.spacing.into_into_dart().into_dart(),
            self.data_type.into_into_dart().into_dart(),
            self.num_components.into_into_dart().into_dart(),
            self.slices.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dicom_rs_interface::DicomVolume
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dicom_rs_interface::DicomVolume>
    for crate::api::dicom_rs_interface::DicomVolume
{
    fn into_into_dart(self) -> crate::api::dicom_rs_interface::DicomVolume {
        self
    }
}

impl SseEncode
    for std::collections::HashMap<
        String,
        std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            String,
            std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, crate::api::dicom_rs_interface::DicomTag)>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode
    for std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomValueType>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, crate::api::dicom_rs_interface::DicomValueType)>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::dicom_rs_interface::DicomDirEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.path, serializer);
        <String>::sse_encode(self.type_name, serializer);
        <std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomValueType>>::sse_encode(self.metadata, serializer);
        <Vec<crate::api::dicom_rs_interface::DicomDirEntry>>::sse_encode(self.children, serializer);
    }
}

impl SseEncode for crate::api::dicom_rs_interface::DicomDirectoryEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.path, serializer);
        <crate::api::dicom_rs_interface::DicomMetadata>::sse_encode(self.metadata, serializer);
        <bool>::sse_encode(self.is_valid, serializer);
    }
}

impl SseEncode for crate::api::dicom_rs_interface::DicomFile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.path, serializer);
        <crate::api::dicom_rs_interface::DicomMetadata>::sse_encode(self.metadata, serializer);
        <Vec<crate::api::dicom_rs_interface::DicomTag>>::sse_encode(self.all_tags, serializer);
    }
}

impl SseEncode for crate::api::dicom_rs_interface::DicomHandler {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::dicom_rs_interface::DicomImage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.width, serializer);
        <u32>::sse_encode(self.height, serializer);
        <u16>::sse_encode(self.bits_allocated, serializer);
        <u16>::sse_encode(self.bits_stored, serializer);
        <u16>::sse_encode(self.high_bit, serializer);
        <u16>::sse_encode(self.pixel_representation, serializer);
        <String>::sse_encode(self.photometric_interpretation, serializer);
        <u16>::sse_encode(self.samples_per_pixel, serializer);
        <Option<u16>>::sse_encode(self.planar_configuration, serializer);
        <Vec<u8>>::sse_encode(self.pixel_data, serializer);
    }
}

impl SseEncode for crate::api::dicom_rs_interface::DicomInstance {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.path, serializer);
        <Option<String>>::sse_encode(self.sop_instance_uid, serializer);
        <Option<i32>>::sse_encode(self.instance_number, serializer);
        <Option<Vec<f64>>>::sse_encode(self.image_position, serializer);
        <Option<f64>>::sse_encode(self.slice_location, serializer);
        <bool>::sse_encode(self.is_valid, serializer);
    }
}

impl SseEncode for crate::api::dicom_rs_interface::DicomMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.patient_name, serializer);
        <Option<String>>::sse_encode(self.patient_id, serializer);
        <Option<String>>::sse_encode(self.study_date, serializer);
        <Option<String>>::sse_encode(self.accession_number, serializer);
        <Option<String>>::sse_encode(self.modality, serializer);
        <Option<String>>::sse_encode(self.study_description, serializer);
        <Option<String>>::sse_encode(self.series_description, serializer);
        <Option<i32>>::sse_encode(self.instance_number, serializer);
        <Option<i32>>::sse_encode(self.series_number, serializer);
        <Option<String>>::sse_encode(self.study_instance_uid, serializer);
        <Option<String>>::sse_encode(self.series_instance_uid, serializer);
        <Option<String>>::sse_encode(self.sop_instance_uid, serializer);
        <Option<Vec<f64>>>::sse_encode(self.image_position, serializer);
        <Option<Vec<f64>>>::sse_encode(self.image_orientation, serializer);
        <Option<f64>>::sse_encode(self.slice_location, serializer);
        <Option<f64>>::sse_encode(self.slice_thickness, serializer);
        <Option<f64>>::sse_encode(self.spacing_between_slices, serializer);
        <Option<Vec<f64>>>::sse_encode(self.pixel_spacing, serializer);
    }
}

impl SseEncode for crate::api::dicom_rs_interface::DicomMetadataMap {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>>::sse_encode(
            self.tags, serializer,
        );
        <std::collections::HashMap<
            String,
            std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>,
        >>::sse_encode(self.group_elements, serializer);
    }
}

impl SseEncode for crate::api::dicom_rs_interface::DicomPatient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.patient_id, serializer);
        <Option<String>>::sse_encode(self.patient_name, serializer);
        <Vec<crate::api::dicom_rs_interface::DicomStudy>>::sse_encode(self.studies, serializer);
    }
}

impl SseEncode for crate::api::dicom_rs_interface::DicomSeries {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.series_instance_uid, serializer);
        <Option<i32>>::sse_encode(self.series_number, serializer);
        <Option<String>>::sse_encode(self.series_description, serializer);
        <Option<String>>::sse_encode(self.modality, serializer);
        <Vec<crate::api::dicom_rs_interface::DicomInstance>>::sse_encode(
            self.instances,
            serializer,
        );
    }
}

impl SseEncode for crate::api::dicom_rs_interface::DicomStudy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.study_instance_uid, serializer);
        <Option<String>>::sse_encode(self.study_date, serializer);
        <Option<String>>::sse_encode(self.study_description, serializer);
        <Option<String>>::sse_encode(self.accession_number, serializer);
        <Vec<crate::api::dicom_rs_interface::DicomSeries>>::sse_encode(self.series, serializer);
    }
}

impl SseEncode for crate::api::dicom_rs_interface::DicomTag {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.tag, serializer);
        <String>::sse_encode(self.vr, serializer);
        <String>::sse_encode(self.name, serializer);
        <crate::api::dicom_rs_interface::DicomValueType>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::dicom_rs_interface::DicomValueType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::dicom_rs_interface::DicomValueType::Str(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::dicom_rs_interface::DicomValueType::Int(field0) => {
                <i32>::sse_encode(1, serializer);
                <i32>::sse_encode(field0, serializer);
            }
            crate::api::dicom_rs_interface::DicomValueType::Float(field0) => {
                <i32>::sse_encode(2, serializer);
                <f32>::sse_encode(field0, serializer);
            }
            crate::api::dicom_rs_interface::DicomValueType::IntList(field0) => {
                <i32>::sse_encode(3, serializer);
                <Vec<i32>>::sse_encode(field0, serializer);
            }
            crate::api::dicom_rs_interface::DicomValueType::FloatList(field0) => {
                <i32>::sse_encode(4, serializer);
                <Vec<f32>>::sse_encode(field0, serializer);
            }
            crate::api::dicom_rs_interface::DicomValueType::StrList(field0) => {
                <i32>::sse_encode(5, serializer);
                <Vec<String>>::sse_encode(field0, serializer);
            }
            crate::api::dicom_rs_interface::DicomValueType::Unknown => {
                <i32>::sse_encode(6, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::dicom_rs_interface::DicomVolume {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.width, serializer);
        <u32>::sse_encode(self.height, serializer);
        <u32>::sse_encode(self.depth, serializer);
        <(f64, f64, f64)>::sse_encode(self.spacing, serializer);
        <String>::sse_encode(self.data_type, serializer);
        <u32>::sse_encode(self.num_components, serializer);
        <Vec<Vec<u8>>>::sse_encode(self.slices, serializer);
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::dicom_rs_interface::DicomDirEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::dicom_rs_interface::DicomDirEntry>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::dicom_rs_interface::DicomDirectoryEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::dicom_rs_interface::DicomDirectoryEntry>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::dicom_rs_interface::DicomInstance> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::dicom_rs_interface::DicomInstance>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::dicom_rs_interface::DicomPatient> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::dicom_rs_interface::DicomPatient>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::dicom_rs_interface::DicomSeries> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::dicom_rs_interface::DicomSeries>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::dicom_rs_interface::DicomStudy> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::dicom_rs_interface::DicomStudy>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::dicom_rs_interface::DicomTag> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::dicom_rs_interface::DicomTag>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Vec<u8>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <f32>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <f64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <i32>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, crate::api::dicom_rs_interface::DicomTag)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, crate::api::dicom_rs_interface::DicomTag)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, crate::api::dicom_rs_interface::DicomValueType)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, crate::api::dicom_rs_interface::DicomValueType)>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<(
        String,
        std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                String,
                std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u16>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<f64>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<f64>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for (f64, f64, f64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.0, serializer);
        <f64>::sse_encode(self.1, serializer);
        <f64>::sse_encode(self.2, serializer);
    }
}

impl SseEncode for (String, crate::api::dicom_rs_interface::DicomTag) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::dicom_rs_interface::DicomTag>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, crate::api::dicom_rs_interface::DicomValueType) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::dicom_rs_interface::DicomValueType>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        String,
        std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <std::collections::HashMap<String, crate::api::dicom_rs_interface::DicomTag>>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.8.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.8.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
